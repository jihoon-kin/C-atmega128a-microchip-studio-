
UART_to_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000008d8  0000096c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006d  0080010e  0080010e  0000097a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000097a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000132c  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb7  00000000  00000000  00001e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b7  00000000  00000000  00002b23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  000033dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000643  00000000  00000000  00003640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000608  00000000  00000000  00003c83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000428b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	03 c1       	rjmp	.+518    	; 0x250 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ed       	ldi	r30, 0xD8	; 216
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 37       	cpi	r26, 0x7B	; 123
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ed d0       	rcall	.+474    	; 0x29e <main>
  c4:	07 c4       	rjmp	.+2062   	; 0x8d4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <I2C_Init>:
﻿#include "I2C.h"

void I2C_Init()
{
	I2C_DDR |= (1<<I2C_SCL) | (1<<I2C_SDA);	//출력 설정
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	83 60       	ori	r24, 0x03	; 3
  cc:	81 bb       	out	0x11, r24	; 17
	TWBR = 72;		// 100KHz
  ce:	88 e4       	ldi	r24, 0x48	; 72
  d0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  d4:	08 95       	ret

000000d6 <I2C_Start>:
	//TWBR = 32;		// 200KHz
	//TWBR = 12;		// 400KHz
}
void I2C_Start()
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
  d6:	84 ea       	ldi	r24, 0xA4	; 164
  d8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	// TWINT에 1을 세트하여 인터럽트를 발생시키는것 같지만
	// 소프트웨어적으로 1을 세트하여 플래그를 클리어 하는것임
	while(!(TWCR & (1<<TWINT)));
  dc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  e0:	88 23       	and	r24, r24
  e2:	e4 f7       	brge	.-8      	; 0xdc <I2C_Start+0x6>
}
  e4:	08 95       	ret

000000e6 <I2C_Stop>:
void I2C_Stop()
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);		//stop bit 설정
  e6:	84 e9       	ldi	r24, 0x94	; 148
  e8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  ec:	08 95       	ret

000000ee <I2C_TxData>:
}
void I2C_TxData(uint8_t data)		//1byte
{
	TWDR = data;
  ee:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) | (1<<TWEN);
  f2:	84 e8       	ldi	r24, 0x84	; 132
  f4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(!(TWCR & (1<<TWINT)));	//전송 완료 대기
  f8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  fc:	88 23       	and	r24, r24
  fe:	e4 f7       	brge	.-8      	; 0xf8 <I2C_TxData+0xa>
}
 100:	08 95       	ret

00000102 <I2C_TxByte>:
void I2C_TxByte(uint8_t devAddRW, uint8_t data)
{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	d8 2f       	mov	r29, r24
 108:	c6 2f       	mov	r28, r22
	I2C_Start();
 10a:	e5 df       	rcall	.-54     	; 0xd6 <I2C_Start>
	I2C_TxData(devAddRW);
 10c:	8d 2f       	mov	r24, r29
 10e:	ef df       	rcall	.-34     	; 0xee <I2C_TxData>
	I2C_TxData(data);
 110:	8c 2f       	mov	r24, r28
 112:	ed df       	rcall	.-38     	; 0xee <I2C_TxData>
	I2C_Stop();
 114:	e8 df       	rcall	.-48     	; 0xe6 <I2C_Stop>
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <LCD_EnablePin>:
 11c:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <I2C_LCD_Data>
	LCD_EnablePin();
}

void LCD_EnablePin()
{
	I2C_LCD_Data &= ~(1<<LCD_E);	//E LOW
 120:	6b 7f       	andi	r22, 0xFB	; 251
 122:	60 93 73 01 	sts	0x0173, r22	; 0x800173 <I2C_LCD_Data>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 126:	8e e4       	ldi	r24, 0x4E	; 78
 128:	ec df       	rcall	.-40     	; 0x102 <I2C_TxByte>
	
	I2C_LCD_Data |= (1<<LCD_E);	//E HIGH
 12a:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <I2C_LCD_Data>
 12e:	64 60       	ori	r22, 0x04	; 4
 130:	60 93 73 01 	sts	0x0173, r22	; 0x800173 <I2C_LCD_Data>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 134:	8e e4       	ldi	r24, 0x4E	; 78
 136:	e5 df       	rcall	.-54     	; 0x102 <I2C_TxByte>
	
	I2C_LCD_Data &= ~(1<<LCD_E);	//E LOW
 138:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <I2C_LCD_Data>
 13c:	6b 7f       	andi	r22, 0xFB	; 251
 13e:	60 93 73 01 	sts	0x0173, r22	; 0x800173 <I2C_LCD_Data>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 142:	8e e4       	ldi	r24, 0x4E	; 78
 144:	de df       	rcall	.-68     	; 0x102 <I2C_TxByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	98 e1       	ldi	r25, 0x18	; 24
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_EnablePin+0x2e>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_EnablePin+0x34>
 150:	00 00       	nop
 152:	08 95       	ret

00000154 <LCD_Data4bit>:
#include "uart0.h"

uint8_t I2C_LCD_Data;

void LCD_Data4bit(uint8_t data)
{
 154:	cf 93       	push	r28
 156:	c8 2f       	mov	r28, r24
	I2C_LCD_Data = (I2C_LCD_Data & 0x0f) | (data & 0xf0);	// 상위 4비트
 158:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <I2C_LCD_Data>
 15c:	8f 70       	andi	r24, 0x0F	; 15
 15e:	9c 2f       	mov	r25, r28
 160:	90 7f       	andi	r25, 0xF0	; 240
 162:	89 2b       	or	r24, r25
 164:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <I2C_LCD_Data>
	LCD_EnablePin();
 168:	d9 df       	rcall	.-78     	; 0x11c <LCD_EnablePin>
	I2C_LCD_Data = (I2C_LCD_Data & 0x0f) | ((data & 0x0f)<<4);	// 하위 4비트
 16a:	20 e1       	ldi	r18, 0x10	; 16
 16c:	c2 9f       	mul	r28, r18
 16e:	c0 01       	movw	r24, r0
 170:	11 24       	eor	r1, r1
 172:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <I2C_LCD_Data>
 176:	9f 70       	andi	r25, 0x0F	; 15
 178:	89 2b       	or	r24, r25
 17a:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <I2C_LCD_Data>
	LCD_EnablePin();
 17e:	ce df       	rcall	.-100    	; 0x11c <LCD_EnablePin>
}
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <LCD_WriteCommand>:
	_delay_us(1600);
}

void LCD_WriteCommand(uint8_t commandData)
{
	I2C_LCD_Data &= ~(1<<LCD_RS);
 184:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <I2C_LCD_Data>
	I2C_LCD_Data &= ~(1<<LCD_RW);
 188:	9c 7f       	andi	r25, 0xFC	; 252
 18a:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <I2C_LCD_Data>
	LCD_Data4bit(commandData);
 18e:	e2 cf       	rjmp	.-60     	; 0x154 <LCD_Data4bit>
 190:	08 95       	ret

00000192 <LCD_WriteData>:
}

void LCD_WriteData(uint8_t charData)
{
	I2C_LCD_Data |= (1<<LCD_RS);
 192:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <I2C_LCD_Data>
 196:	91 60       	ori	r25, 0x01	; 1
	I2C_LCD_Data &= ~(1<<LCD_RW);
 198:	9d 7f       	andi	r25, 0xFD	; 253
 19a:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <I2C_LCD_Data>
	LCD_Data4bit(charData);
 19e:	da cf       	rjmp	.-76     	; 0x154 <LCD_Data4bit>
 1a0:	08 95       	ret

000001a2 <LCD_BackLightOn>:
}

void LCD_BackLightOn()
{
	I2C_LCD_Data |=(1<<LCD_BACKLIGHT);
 1a2:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <I2C_LCD_Data>
 1a6:	68 60       	ori	r22, 0x08	; 8
 1a8:	60 93 73 01 	sts	0x0173, r22	; 0x800173 <I2C_LCD_Data>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);
 1ac:	8e e4       	ldi	r24, 0x4E	; 78
 1ae:	a9 cf       	rjmp	.-174    	; 0x102 <I2C_TxByte>
 1b0:	08 95       	ret

000001b2 <LCD_GotoXY>:
}

void LCD_GotoXY(uint8_t row, uint8_t col)
{
	col %= 16;
 1b2:	6f 70       	andi	r22, 0x0F	; 15
	row %= 2;
 1b4:	81 70       	andi	r24, 0x01	; 1
	uint8_t address = (0x40 * row) + col;
 1b6:	90 e4       	ldi	r25, 0x40	; 64
 1b8:	89 9f       	mul	r24, r25
 1ba:	60 0d       	add	r22, r0
 1bc:	11 24       	eor	r1, r1
 1be:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 + address;
	LCD_WriteCommand(command);
 1c0:	80 58       	subi	r24, 0x80	; 128
 1c2:	e0 cf       	rjmp	.-64     	; 0x184 <LCD_WriteCommand>
 1c4:	08 95       	ret

000001c6 <LCD_WriteString>:
}

void LCD_WriteString(char *string)
{
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	8c 01       	movw	r16, r24
	for (uint8_t i = 0; string[i]; i++)
 1ce:	c0 e0       	ldi	r28, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <LCD_WriteString+0x10>
	{
		LCD_WriteData(string[i]);
 1d2:	df df       	rcall	.-66     	; 0x192 <LCD_WriteData>
	LCD_WriteCommand(command);
}

void LCD_WriteString(char *string)
{
	for (uint8_t i = 0; string[i]; i++)
 1d4:	cf 5f       	subi	r28, 0xFF	; 255
 1d6:	f8 01       	movw	r30, r16
 1d8:	ec 0f       	add	r30, r28
 1da:	f1 1d       	adc	r31, r1
 1dc:	80 81       	ld	r24, Z
 1de:	81 11       	cpse	r24, r1
 1e0:	f8 cf       	rjmp	.-16     	; 0x1d2 <LCD_WriteString+0xc>
	{
		LCD_WriteData(string[i]);
	}
}
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	08 95       	ret

000001ea <LCD_WriteStringXY>:

void LCD_WriteStringXY(uint8_t row, uint8_t col, char *string)
{
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	ea 01       	movw	r28, r20
	LCD_GotoXY(row, col);
 1f0:	e0 df       	rcall	.-64     	; 0x1b2 <LCD_GotoXY>
	LCD_WriteString(string);
 1f2:	ce 01       	movw	r24, r28
 1f4:	e8 df       	rcall	.-48     	; 0x1c6 <LCD_WriteString>
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <LCD_Init>:

void LCD_Init()
{
	I2C_Init();
 1fc:	65 df       	rcall	.-310    	; 0xc8 <I2C_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fe:	2f ef       	ldi	r18, 0xFF	; 255
 200:	89 ef       	ldi	r24, 0xF9	; 249
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	21 50       	subi	r18, 0x01	; 1
 206:	80 40       	sbci	r24, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <LCD_Init+0x8>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <LCD_Init+0x12>
 20e:	00 00       	nop
	_delay_ms(20);
	LCD_WriteCommand(0x03);
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	b8 df       	rcall	.-144    	; 0x184 <LCD_WriteCommand>
 214:	8f e3       	ldi	r24, 0x3F	; 63
 216:	9c e9       	ldi	r25, 0x9C	; 156
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCD_Init+0x1c>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <LCD_Init+0x22>
	_delay_ms(10);
	LCD_WriteCommand(0x03);
 21e:	00 00       	nop
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	b0 df       	rcall	.-160    	; 0x184 <LCD_WriteCommand>
 224:	8f e9       	ldi	r24, 0x9F	; 159
 226:	9f e0       	ldi	r25, 0x0F	; 15
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_Init+0x2c>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <LCD_Init+0x32>
	_delay_ms(1);
	LCD_WriteCommand(0x03);
 22e:	00 00       	nop
 230:	83 e0       	ldi	r24, 0x03	; 3
	
	LCD_WriteCommand(0x02);
 232:	a8 df       	rcall	.-176    	; 0x184 <LCD_WriteCommand>
 234:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteCommand(COMMAND_4_BIT_MODE);
 236:	a6 df       	rcall	.-180    	; 0x184 <LCD_WriteCommand>
 238:	88 e2       	ldi	r24, 0x28	; 40
	LCD_WriteCommand(COMMAND_DISPLAY_OFF);
 23a:	a4 df       	rcall	.-184    	; 0x184 <LCD_WriteCommand>
 23c:	88 e0       	ldi	r24, 0x08	; 8
	LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
 23e:	a2 df       	rcall	.-188    	; 0x184 <LCD_WriteCommand>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	a0 df       	rcall	.-192    	; 0x184 <LCD_WriteCommand>
	LCD_WriteCommand(COMMAND_ENTRY_MODE);
 244:	86 e0       	ldi	r24, 0x06	; 6
 246:	9e df       	rcall	.-196    	; 0x184 <LCD_WriteCommand>
 248:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_WriteCommand(COMMAND_DISPLAY_ON);
 24a:	9c df       	rcall	.-200    	; 0x184 <LCD_WriteCommand>
 24c:	aa cf       	rjmp	.-172    	; 0x1a2 <LCD_BackLightOn>
 24e:	08 95       	ret

00000250 <__vector_18>:
#include "uart0.h"

FILE OUTPUT = FDEV_SETUP_STREAM(USART0_Transmit, NULL, _FDEV_SETUP_WRITE);

ISR(USART0_RX_vect)
{
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	0b b6       	in	r0, 0x3b	; 59
 25c:	0f 92       	push	r0
 25e:	2f 93       	push	r18
 260:	3f 93       	push	r19
 262:	4f 93       	push	r20
 264:	5f 93       	push	r21
 266:	6f 93       	push	r22
 268:	7f 93       	push	r23
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
 26e:	af 93       	push	r26
 270:	bf 93       	push	r27
 272:	ef 93       	push	r30
 274:	ff 93       	push	r31
	USART0_ISR_Process();
 276:	40 d0       	rcall	.+128    	; 0x2f8 <USART0_ISR_Process>
}
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0b be       	out	0x3b, r0	; 59
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <main>:

int main(void)
{
	UART0_init();
 29e:	0e d0       	rcall	.+28     	; 0x2bc <UART0_init>
	stdout = &OUTPUT;
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <__iob+0x3>
 2a8:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <__iob+0x2>
	LCD_Init();
	while (1)
	{
		UART0_execute();
 2ac:	a7 df       	rcall	.-178    	; 0x1fc <LCD_Init>
 2ae:	3c d0       	rcall	.+120    	; 0x328 <UART0_execute>
		//LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
		uint8_t *data = UART0_readRxBuff();
 2b0:	1c d0       	rcall	.+56     	; 0x2ea <UART0_readRxBuff>
		LCD_WriteStringXY(0,0,data);
 2b2:	ac 01       	movw	r20, r24
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	98 df       	rcall	.-208    	; 0x1ea <LCD_WriteStringXY>
 2ba:	f9 cf       	rjmp	.-14     	; 0x2ae <main+0x10>

000002bc <UART0_init>:
 2bc:	8a b1       	in	r24, 0x0a	; 10

unsigned char USART0_Receive( void )
{	 
	while ( !(UCSR0A & (1 << RXC0)));
	return UDR0;
}
 2be:	88 61       	ori	r24, 0x18	; 24
 2c0:	8a b9       	out	0x0a, r24	; 10
 2c2:	8b b1       	in	r24, 0x0b	; 11
 2c4:	82 60       	ori	r24, 0x02	; 2
 2c6:	8b b9       	out	0x0b, r24	; 11
 2c8:	8f ec       	ldi	r24, 0xCF	; 207
 2ca:	89 b9       	out	0x09, r24	; 9
 2cc:	8a b1       	in	r24, 0x0a	; 10
 2ce:	80 68       	ori	r24, 0x80	; 128
 2d0:	8a b9       	out	0x0a, r24	; 10
 2d2:	78 94       	sei
 2d4:	08 95       	ret

000002d6 <UART0_getRxFlag>:
 2d6:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <uart0RxCFlag>
 2da:	08 95       	ret

000002dc <UART0_clearRxFlag>:
 2dc:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <uart0RxCFlag>
 2e0:	08 95       	ret

000002e2 <UART0_setReadyRxFlag>:
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <uart0RxCFlag>
 2e8:	08 95       	ret

000002ea <UART0_readRxBuff>:
 2ea:	8f e0       	ldi	r24, 0x0F	; 15
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	08 95       	ret

000002f0 <USART0_Transmit>:
 2f0:	5d 9b       	sbis	0x0b, 5	; 11
 2f2:	fe cf       	rjmp	.-4      	; 0x2f0 <USART0_Transmit>
 2f4:	8c b9       	out	0x0c, r24	; 12
 2f6:	08 95       	ret

000002f8 <USART0_ISR_Process>:
	}
}*/

void USART0_ISR_Process()
{
	uint8_t rx0Data = UDR0;
 2f8:	9c b1       	in	r25, 0x0c	; 12
	static uint8_t uart0RxTail = 0;
	// Insert null (\0) at the end of corresponding string and initialize a tail to 0 when \n detected
	if (rx0Data == '\n')
 2fa:	9a 30       	cpi	r25, 0x0A	; 10
 2fc:	51 f4       	brne	.+20     	; 0x312 <USART0_ISR_Process+0x1a>
	{
		//uart0RxBuff[uart0RxTail] = rx0Data;
		//uart0RxTail++;
		uart0RxBuff[uart0RxTail] = '\0';
 2fe:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__data_end>
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	e1 5f       	subi	r30, 0xF1	; 241
 306:	fe 4f       	sbci	r31, 0xFE	; 254
 308:	10 82       	st	Z, r1
		uart0RxTail = 0;
 30a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
		UART0_setReadyRxFlag();
 30e:	e9 cf       	rjmp	.-46     	; 0x2e2 <UART0_setReadyRxFlag>
 310:	08 95       	ret
	}
	else
	{
		uart0RxBuff[uart0RxTail] = rx0Data;
 312:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 316:	e8 2f       	mov	r30, r24
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	e1 5f       	subi	r30, 0xF1	; 241
 31c:	fe 4f       	sbci	r31, 0xFE	; 254
 31e:	90 83       	st	Z, r25
		uart0RxTail++;
 320:	8f 5f       	subi	r24, 0xFF	; 255
 322:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 326:	08 95       	ret

00000328 <UART0_execute>:
	}
}

void UART0_execute()
{	   
	if (UART0_getRxFlag())
 328:	d6 df       	rcall	.-84     	; 0x2d6 <UART0_getRxFlag>
 32a:	88 23       	and	r24, r24
 32c:	49 f0       	breq	.+18     	; 0x340 <UART0_execute+0x18>
	{
		UART0_clearRxFlag();
 32e:	d6 df       	rcall	.-84     	; 0x2dc <UART0_clearRxFlag>
		LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	28 df       	rcall	.-432    	; 0x184 <LCD_WriteCommand>
		uint8_t *rxString = UART0_readRxBuff();
 334:	da df       	rcall	.-76     	; 0x2ea <UART0_readRxBuff>
		
		printf(rxString);
 336:	9f 93       	push	r25
 338:	8f 93       	push	r24
 33a:	0c d0       	rcall	.+24     	; 0x354 <printf>
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	2f ef       	ldi	r18, 0xFF	; 255
 342:	85 ea       	ldi	r24, 0xA5	; 165
 344:	9e e0       	ldi	r25, 0x0E	; 14
 346:	21 50       	subi	r18, 0x01	; 1
 348:	80 40       	sbci	r24, 0x00	; 0
 34a:	90 40       	sbci	r25, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <UART0_execute+0x1e>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <UART0_execute+0x28>
 350:	00 00       	nop
 352:	08 95       	ret

00000354 <printf>:
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	cd b7       	in	r28, 0x3d	; 61
 35a:	de b7       	in	r29, 0x3e	; 62
 35c:	ae 01       	movw	r20, r28
 35e:	4b 5f       	subi	r20, 0xFB	; 251
 360:	5f 4f       	sbci	r21, 0xFF	; 255
 362:	fa 01       	movw	r30, r20
 364:	61 91       	ld	r22, Z+
 366:	71 91       	ld	r23, Z+
 368:	af 01       	movw	r20, r30
 36a:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <__iob+0x2>
 36e:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <__iob+0x3>
 372:	03 d0       	rcall	.+6      	; 0x37a <vfprintf>
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	08 95       	ret

0000037a <vfprintf>:
 37a:	2f 92       	push	r2
 37c:	3f 92       	push	r3
 37e:	4f 92       	push	r4
 380:	5f 92       	push	r5
 382:	6f 92       	push	r6
 384:	7f 92       	push	r7
 386:	8f 92       	push	r8
 388:	9f 92       	push	r9
 38a:	af 92       	push	r10
 38c:	bf 92       	push	r11
 38e:	cf 92       	push	r12
 390:	df 92       	push	r13
 392:	ef 92       	push	r14
 394:	ff 92       	push	r15
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	cd b7       	in	r28, 0x3d	; 61
 3a0:	de b7       	in	r29, 0x3e	; 62
 3a2:	2b 97       	sbiw	r28, 0x0b	; 11
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	f8 94       	cli
 3a8:	de bf       	out	0x3e, r29	; 62
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	cd bf       	out	0x3d, r28	; 61
 3ae:	6c 01       	movw	r12, r24
 3b0:	7b 01       	movw	r14, r22
 3b2:	8a 01       	movw	r16, r20
 3b4:	fc 01       	movw	r30, r24
 3b6:	17 82       	std	Z+7, r1	; 0x07
 3b8:	16 82       	std	Z+6, r1	; 0x06
 3ba:	83 81       	ldd	r24, Z+3	; 0x03
 3bc:	81 ff       	sbrs	r24, 1
 3be:	bf c1       	rjmp	.+894    	; 0x73e <__LOCK_REGION_LENGTH__+0x33e>
 3c0:	ce 01       	movw	r24, r28
 3c2:	01 96       	adiw	r24, 0x01	; 1
 3c4:	3c 01       	movw	r6, r24
 3c6:	f6 01       	movw	r30, r12
 3c8:	93 81       	ldd	r25, Z+3	; 0x03
 3ca:	f7 01       	movw	r30, r14
 3cc:	93 fd       	sbrc	r25, 3
 3ce:	85 91       	lpm	r24, Z+
 3d0:	93 ff       	sbrs	r25, 3
 3d2:	81 91       	ld	r24, Z+
 3d4:	7f 01       	movw	r14, r30
 3d6:	88 23       	and	r24, r24
 3d8:	09 f4       	brne	.+2      	; 0x3dc <vfprintf+0x62>
 3da:	ad c1       	rjmp	.+858    	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
 3dc:	85 32       	cpi	r24, 0x25	; 37
 3de:	39 f4       	brne	.+14     	; 0x3ee <vfprintf+0x74>
 3e0:	93 fd       	sbrc	r25, 3
 3e2:	85 91       	lpm	r24, Z+
 3e4:	93 ff       	sbrs	r25, 3
 3e6:	81 91       	ld	r24, Z+
 3e8:	7f 01       	movw	r14, r30
 3ea:	85 32       	cpi	r24, 0x25	; 37
 3ec:	21 f4       	brne	.+8      	; 0x3f6 <vfprintf+0x7c>
 3ee:	b6 01       	movw	r22, r12
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	d6 d1       	rcall	.+940    	; 0x7a0 <fputc>
 3f4:	e8 cf       	rjmp	.-48     	; 0x3c6 <vfprintf+0x4c>
 3f6:	91 2c       	mov	r9, r1
 3f8:	21 2c       	mov	r2, r1
 3fa:	31 2c       	mov	r3, r1
 3fc:	ff e1       	ldi	r31, 0x1F	; 31
 3fe:	f3 15       	cp	r31, r3
 400:	d8 f0       	brcs	.+54     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 402:	8b 32       	cpi	r24, 0x2B	; 43
 404:	79 f0       	breq	.+30     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 406:	38 f4       	brcc	.+14     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 408:	80 32       	cpi	r24, 0x20	; 32
 40a:	79 f0       	breq	.+30     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 40c:	83 32       	cpi	r24, 0x23	; 35
 40e:	a1 f4       	brne	.+40     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 410:	23 2d       	mov	r18, r3
 412:	20 61       	ori	r18, 0x10	; 16
 414:	1d c0       	rjmp	.+58     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 416:	8d 32       	cpi	r24, 0x2D	; 45
 418:	61 f0       	breq	.+24     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 41a:	80 33       	cpi	r24, 0x30	; 48
 41c:	69 f4       	brne	.+26     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 41e:	23 2d       	mov	r18, r3
 420:	21 60       	ori	r18, 0x01	; 1
 422:	16 c0       	rjmp	.+44     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 424:	83 2d       	mov	r24, r3
 426:	82 60       	ori	r24, 0x02	; 2
 428:	38 2e       	mov	r3, r24
 42a:	e3 2d       	mov	r30, r3
 42c:	e4 60       	ori	r30, 0x04	; 4
 42e:	3e 2e       	mov	r3, r30
 430:	2a c0       	rjmp	.+84     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 432:	f3 2d       	mov	r31, r3
 434:	f8 60       	ori	r31, 0x08	; 8
 436:	1d c0       	rjmp	.+58     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 438:	37 fc       	sbrc	r3, 7
 43a:	2d c0       	rjmp	.+90     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 43c:	20 ed       	ldi	r18, 0xD0	; 208
 43e:	28 0f       	add	r18, r24
 440:	2a 30       	cpi	r18, 0x0A	; 10
 442:	40 f0       	brcs	.+16     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 444:	8e 32       	cpi	r24, 0x2E	; 46
 446:	b9 f4       	brne	.+46     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 448:	36 fc       	sbrc	r3, 6
 44a:	75 c1       	rjmp	.+746    	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
 44c:	23 2d       	mov	r18, r3
 44e:	20 64       	ori	r18, 0x40	; 64
 450:	32 2e       	mov	r3, r18
 452:	19 c0       	rjmp	.+50     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 454:	36 fe       	sbrs	r3, 6
 456:	06 c0       	rjmp	.+12     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 458:	8a e0       	ldi	r24, 0x0A	; 10
 45a:	98 9e       	mul	r9, r24
 45c:	20 0d       	add	r18, r0
 45e:	11 24       	eor	r1, r1
 460:	92 2e       	mov	r9, r18
 462:	11 c0       	rjmp	.+34     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 464:	ea e0       	ldi	r30, 0x0A	; 10
 466:	2e 9e       	mul	r2, r30
 468:	20 0d       	add	r18, r0
 46a:	11 24       	eor	r1, r1
 46c:	22 2e       	mov	r2, r18
 46e:	f3 2d       	mov	r31, r3
 470:	f0 62       	ori	r31, 0x20	; 32
 472:	3f 2e       	mov	r3, r31
 474:	08 c0       	rjmp	.+16     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 476:	8c 36       	cpi	r24, 0x6C	; 108
 478:	21 f4       	brne	.+8      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 47a:	83 2d       	mov	r24, r3
 47c:	80 68       	ori	r24, 0x80	; 128
 47e:	38 2e       	mov	r3, r24
 480:	02 c0       	rjmp	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 482:	88 36       	cpi	r24, 0x68	; 104
 484:	41 f4       	brne	.+16     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 486:	f7 01       	movw	r30, r14
 488:	93 fd       	sbrc	r25, 3
 48a:	85 91       	lpm	r24, Z+
 48c:	93 ff       	sbrs	r25, 3
 48e:	81 91       	ld	r24, Z+
 490:	7f 01       	movw	r14, r30
 492:	81 11       	cpse	r24, r1
 494:	b3 cf       	rjmp	.-154    	; 0x3fc <vfprintf+0x82>
 496:	98 2f       	mov	r25, r24
 498:	9f 7d       	andi	r25, 0xDF	; 223
 49a:	95 54       	subi	r25, 0x45	; 69
 49c:	93 30       	cpi	r25, 0x03	; 3
 49e:	28 f4       	brcc	.+10     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a0:	0c 5f       	subi	r16, 0xFC	; 252
 4a2:	1f 4f       	sbci	r17, 0xFF	; 255
 4a4:	9f e3       	ldi	r25, 0x3F	; 63
 4a6:	99 83       	std	Y+1, r25	; 0x01
 4a8:	0d c0       	rjmp	.+26     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4aa:	83 36       	cpi	r24, 0x63	; 99
 4ac:	31 f0       	breq	.+12     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4ae:	83 37       	cpi	r24, 0x73	; 115
 4b0:	71 f0       	breq	.+28     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4b2:	83 35       	cpi	r24, 0x53	; 83
 4b4:	09 f0       	breq	.+2      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b6:	55 c0       	rjmp	.+170    	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 4b8:	20 c0       	rjmp	.+64     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4ba:	f8 01       	movw	r30, r16
 4bc:	80 81       	ld	r24, Z
 4be:	89 83       	std	Y+1, r24	; 0x01
 4c0:	0e 5f       	subi	r16, 0xFE	; 254
 4c2:	1f 4f       	sbci	r17, 0xFF	; 255
 4c4:	88 24       	eor	r8, r8
 4c6:	83 94       	inc	r8
 4c8:	91 2c       	mov	r9, r1
 4ca:	53 01       	movw	r10, r6
 4cc:	12 c0       	rjmp	.+36     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4ce:	28 01       	movw	r4, r16
 4d0:	f2 e0       	ldi	r31, 0x02	; 2
 4d2:	4f 0e       	add	r4, r31
 4d4:	51 1c       	adc	r5, r1
 4d6:	f8 01       	movw	r30, r16
 4d8:	a0 80       	ld	r10, Z
 4da:	b1 80       	ldd	r11, Z+1	; 0x01
 4dc:	36 fe       	sbrs	r3, 6
 4de:	03 c0       	rjmp	.+6      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e0:	69 2d       	mov	r22, r9
 4e2:	70 e0       	ldi	r23, 0x00	; 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4e6:	6f ef       	ldi	r22, 0xFF	; 255
 4e8:	7f ef       	ldi	r23, 0xFF	; 255
 4ea:	c5 01       	movw	r24, r10
 4ec:	4e d1       	rcall	.+668    	; 0x78a <strnlen>
 4ee:	4c 01       	movw	r8, r24
 4f0:	82 01       	movw	r16, r4
 4f2:	f3 2d       	mov	r31, r3
 4f4:	ff 77       	andi	r31, 0x7F	; 127
 4f6:	3f 2e       	mov	r3, r31
 4f8:	15 c0       	rjmp	.+42     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 4fa:	28 01       	movw	r4, r16
 4fc:	22 e0       	ldi	r18, 0x02	; 2
 4fe:	42 0e       	add	r4, r18
 500:	51 1c       	adc	r5, r1
 502:	f8 01       	movw	r30, r16
 504:	a0 80       	ld	r10, Z
 506:	b1 80       	ldd	r11, Z+1	; 0x01
 508:	36 fe       	sbrs	r3, 6
 50a:	03 c0       	rjmp	.+6      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 50c:	69 2d       	mov	r22, r9
 50e:	70 e0       	ldi	r23, 0x00	; 0
 510:	02 c0       	rjmp	.+4      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 512:	6f ef       	ldi	r22, 0xFF	; 255
 514:	7f ef       	ldi	r23, 0xFF	; 255
 516:	c5 01       	movw	r24, r10
 518:	2d d1       	rcall	.+602    	; 0x774 <strnlen_P>
 51a:	4c 01       	movw	r8, r24
 51c:	f3 2d       	mov	r31, r3
 51e:	f0 68       	ori	r31, 0x80	; 128
 520:	3f 2e       	mov	r3, r31
 522:	82 01       	movw	r16, r4
 524:	33 fc       	sbrc	r3, 3
 526:	19 c0       	rjmp	.+50     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 528:	82 2d       	mov	r24, r2
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	88 16       	cp	r8, r24
 52e:	99 06       	cpc	r9, r25
 530:	a0 f4       	brcc	.+40     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 532:	b6 01       	movw	r22, r12
 534:	80 e2       	ldi	r24, 0x20	; 32
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	33 d1       	rcall	.+614    	; 0x7a0 <fputc>
 53a:	2a 94       	dec	r2
 53c:	f5 cf       	rjmp	.-22     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 53e:	f5 01       	movw	r30, r10
 540:	37 fc       	sbrc	r3, 7
 542:	85 91       	lpm	r24, Z+
 544:	37 fe       	sbrs	r3, 7
 546:	81 91       	ld	r24, Z+
 548:	5f 01       	movw	r10, r30
 54a:	b6 01       	movw	r22, r12
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	28 d1       	rcall	.+592    	; 0x7a0 <fputc>
 550:	21 10       	cpse	r2, r1
 552:	2a 94       	dec	r2
 554:	21 e0       	ldi	r18, 0x01	; 1
 556:	82 1a       	sub	r8, r18
 558:	91 08       	sbc	r9, r1
 55a:	81 14       	cp	r8, r1
 55c:	91 04       	cpc	r9, r1
 55e:	79 f7       	brne	.-34     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 560:	e1 c0       	rjmp	.+450    	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
 562:	84 36       	cpi	r24, 0x64	; 100
 564:	11 f0       	breq	.+4      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 566:	89 36       	cpi	r24, 0x69	; 105
 568:	39 f5       	brne	.+78     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 56a:	f8 01       	movw	r30, r16
 56c:	37 fe       	sbrs	r3, 7
 56e:	07 c0       	rjmp	.+14     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 570:	60 81       	ld	r22, Z
 572:	71 81       	ldd	r23, Z+1	; 0x01
 574:	82 81       	ldd	r24, Z+2	; 0x02
 576:	93 81       	ldd	r25, Z+3	; 0x03
 578:	0c 5f       	subi	r16, 0xFC	; 252
 57a:	1f 4f       	sbci	r17, 0xFF	; 255
 57c:	08 c0       	rjmp	.+16     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 57e:	60 81       	ld	r22, Z
 580:	71 81       	ldd	r23, Z+1	; 0x01
 582:	07 2e       	mov	r0, r23
 584:	00 0c       	add	r0, r0
 586:	88 0b       	sbc	r24, r24
 588:	99 0b       	sbc	r25, r25
 58a:	0e 5f       	subi	r16, 0xFE	; 254
 58c:	1f 4f       	sbci	r17, 0xFF	; 255
 58e:	f3 2d       	mov	r31, r3
 590:	ff 76       	andi	r31, 0x6F	; 111
 592:	3f 2e       	mov	r3, r31
 594:	97 ff       	sbrs	r25, 7
 596:	09 c0       	rjmp	.+18     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
 598:	90 95       	com	r25
 59a:	80 95       	com	r24
 59c:	70 95       	com	r23
 59e:	61 95       	neg	r22
 5a0:	7f 4f       	sbci	r23, 0xFF	; 255
 5a2:	8f 4f       	sbci	r24, 0xFF	; 255
 5a4:	9f 4f       	sbci	r25, 0xFF	; 255
 5a6:	f0 68       	ori	r31, 0x80	; 128
 5a8:	3f 2e       	mov	r3, r31
 5aa:	2a e0       	ldi	r18, 0x0A	; 10
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	a3 01       	movw	r20, r6
 5b0:	33 d1       	rcall	.+614    	; 0x818 <__ultoa_invert>
 5b2:	88 2e       	mov	r8, r24
 5b4:	86 18       	sub	r8, r6
 5b6:	44 c0       	rjmp	.+136    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
 5b8:	85 37       	cpi	r24, 0x75	; 117
 5ba:	31 f4       	brne	.+12     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5bc:	23 2d       	mov	r18, r3
 5be:	2f 7e       	andi	r18, 0xEF	; 239
 5c0:	b2 2e       	mov	r11, r18
 5c2:	2a e0       	ldi	r18, 0x0A	; 10
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	25 c0       	rjmp	.+74     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 5c8:	93 2d       	mov	r25, r3
 5ca:	99 7f       	andi	r25, 0xF9	; 249
 5cc:	b9 2e       	mov	r11, r25
 5ce:	8f 36       	cpi	r24, 0x6F	; 111
 5d0:	c1 f0       	breq	.+48     	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 5d2:	18 f4       	brcc	.+6      	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 5d4:	88 35       	cpi	r24, 0x58	; 88
 5d6:	79 f0       	breq	.+30     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5d8:	ae c0       	rjmp	.+348    	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
 5da:	80 37       	cpi	r24, 0x70	; 112
 5dc:	19 f0       	breq	.+6      	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5de:	88 37       	cpi	r24, 0x78	; 120
 5e0:	21 f0       	breq	.+8      	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 5e2:	a9 c0       	rjmp	.+338    	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
 5e4:	e9 2f       	mov	r30, r25
 5e6:	e0 61       	ori	r30, 0x10	; 16
 5e8:	be 2e       	mov	r11, r30
 5ea:	b4 fe       	sbrs	r11, 4
 5ec:	0d c0       	rjmp	.+26     	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 5ee:	fb 2d       	mov	r31, r11
 5f0:	f4 60       	ori	r31, 0x04	; 4
 5f2:	bf 2e       	mov	r11, r31
 5f4:	09 c0       	rjmp	.+18     	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 5f6:	34 fe       	sbrs	r3, 4
 5f8:	0a c0       	rjmp	.+20     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 5fa:	29 2f       	mov	r18, r25
 5fc:	26 60       	ori	r18, 0x06	; 6
 5fe:	b2 2e       	mov	r11, r18
 600:	06 c0       	rjmp	.+12     	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 602:	28 e0       	ldi	r18, 0x08	; 8
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	05 c0       	rjmp	.+10     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 608:	20 e1       	ldi	r18, 0x10	; 16
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	02 c0       	rjmp	.+4      	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 60e:	20 e1       	ldi	r18, 0x10	; 16
 610:	32 e0       	ldi	r19, 0x02	; 2
 612:	f8 01       	movw	r30, r16
 614:	b7 fe       	sbrs	r11, 7
 616:	07 c0       	rjmp	.+14     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 618:	60 81       	ld	r22, Z
 61a:	71 81       	ldd	r23, Z+1	; 0x01
 61c:	82 81       	ldd	r24, Z+2	; 0x02
 61e:	93 81       	ldd	r25, Z+3	; 0x03
 620:	0c 5f       	subi	r16, 0xFC	; 252
 622:	1f 4f       	sbci	r17, 0xFF	; 255
 624:	06 c0       	rjmp	.+12     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
 626:	60 81       	ld	r22, Z
 628:	71 81       	ldd	r23, Z+1	; 0x01
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	0e 5f       	subi	r16, 0xFE	; 254
 630:	1f 4f       	sbci	r17, 0xFF	; 255
 632:	a3 01       	movw	r20, r6
 634:	f1 d0       	rcall	.+482    	; 0x818 <__ultoa_invert>
 636:	88 2e       	mov	r8, r24
 638:	86 18       	sub	r8, r6
 63a:	fb 2d       	mov	r31, r11
 63c:	ff 77       	andi	r31, 0x7F	; 127
 63e:	3f 2e       	mov	r3, r31
 640:	36 fe       	sbrs	r3, 6
 642:	0d c0       	rjmp	.+26     	; 0x65e <__LOCK_REGION_LENGTH__+0x25e>
 644:	23 2d       	mov	r18, r3
 646:	2e 7f       	andi	r18, 0xFE	; 254
 648:	a2 2e       	mov	r10, r18
 64a:	89 14       	cp	r8, r9
 64c:	58 f4       	brcc	.+22     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
 64e:	34 fe       	sbrs	r3, 4
 650:	0b c0       	rjmp	.+22     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 652:	32 fc       	sbrc	r3, 2
 654:	09 c0       	rjmp	.+18     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 656:	83 2d       	mov	r24, r3
 658:	8e 7e       	andi	r24, 0xEE	; 238
 65a:	a8 2e       	mov	r10, r24
 65c:	05 c0       	rjmp	.+10     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 65e:	b8 2c       	mov	r11, r8
 660:	a3 2c       	mov	r10, r3
 662:	03 c0       	rjmp	.+6      	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 664:	b8 2c       	mov	r11, r8
 666:	01 c0       	rjmp	.+2      	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 668:	b9 2c       	mov	r11, r9
 66a:	a4 fe       	sbrs	r10, 4
 66c:	0f c0       	rjmp	.+30     	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
 66e:	fe 01       	movw	r30, r28
 670:	e8 0d       	add	r30, r8
 672:	f1 1d       	adc	r31, r1
 674:	80 81       	ld	r24, Z
 676:	80 33       	cpi	r24, 0x30	; 48
 678:	21 f4       	brne	.+8      	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
 67a:	9a 2d       	mov	r25, r10
 67c:	99 7e       	andi	r25, 0xE9	; 233
 67e:	a9 2e       	mov	r10, r25
 680:	09 c0       	rjmp	.+18     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
 682:	a2 fe       	sbrs	r10, 2
 684:	06 c0       	rjmp	.+12     	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
 686:	b3 94       	inc	r11
 688:	b3 94       	inc	r11
 68a:	04 c0       	rjmp	.+8      	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
 68c:	8a 2d       	mov	r24, r10
 68e:	86 78       	andi	r24, 0x86	; 134
 690:	09 f0       	breq	.+2      	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
 692:	b3 94       	inc	r11
 694:	a3 fc       	sbrc	r10, 3
 696:	10 c0       	rjmp	.+32     	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
 698:	a0 fe       	sbrs	r10, 0
 69a:	06 c0       	rjmp	.+12     	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
 69c:	b2 14       	cp	r11, r2
 69e:	80 f4       	brcc	.+32     	; 0x6c0 <__LOCK_REGION_LENGTH__+0x2c0>
 6a0:	28 0c       	add	r2, r8
 6a2:	92 2c       	mov	r9, r2
 6a4:	9b 18       	sub	r9, r11
 6a6:	0d c0       	rjmp	.+26     	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
 6a8:	b2 14       	cp	r11, r2
 6aa:	58 f4       	brcc	.+22     	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
 6ac:	b6 01       	movw	r22, r12
 6ae:	80 e2       	ldi	r24, 0x20	; 32
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	76 d0       	rcall	.+236    	; 0x7a0 <fputc>
 6b4:	b3 94       	inc	r11
 6b6:	f8 cf       	rjmp	.-16     	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
 6b8:	b2 14       	cp	r11, r2
 6ba:	18 f4       	brcc	.+6      	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
 6bc:	2b 18       	sub	r2, r11
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <__LOCK_REGION_LENGTH__+0x2c4>
 6c0:	98 2c       	mov	r9, r8
 6c2:	21 2c       	mov	r2, r1
 6c4:	a4 fe       	sbrs	r10, 4
 6c6:	0f c0       	rjmp	.+30     	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
 6c8:	b6 01       	movw	r22, r12
 6ca:	80 e3       	ldi	r24, 0x30	; 48
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	68 d0       	rcall	.+208    	; 0x7a0 <fputc>
 6d0:	a2 fe       	sbrs	r10, 2
 6d2:	16 c0       	rjmp	.+44     	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 6d4:	a1 fc       	sbrc	r10, 1
 6d6:	03 c0       	rjmp	.+6      	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
 6d8:	88 e7       	ldi	r24, 0x78	; 120
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 6de:	88 e5       	ldi	r24, 0x58	; 88
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	b6 01       	movw	r22, r12
 6e4:	0c c0       	rjmp	.+24     	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
 6e6:	8a 2d       	mov	r24, r10
 6e8:	86 78       	andi	r24, 0x86	; 134
 6ea:	51 f0       	breq	.+20     	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 6ec:	a1 fe       	sbrs	r10, 1
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
 6f0:	8b e2       	ldi	r24, 0x2B	; 43
 6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <__LOCK_REGION_LENGTH__+0x2f6>
 6f4:	80 e2       	ldi	r24, 0x20	; 32
 6f6:	a7 fc       	sbrc	r10, 7
 6f8:	8d e2       	ldi	r24, 0x2D	; 45
 6fa:	b6 01       	movw	r22, r12
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	50 d0       	rcall	.+160    	; 0x7a0 <fputc>
 700:	89 14       	cp	r8, r9
 702:	30 f4       	brcc	.+12     	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
 704:	b6 01       	movw	r22, r12
 706:	80 e3       	ldi	r24, 0x30	; 48
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	4a d0       	rcall	.+148    	; 0x7a0 <fputc>
 70c:	9a 94       	dec	r9
 70e:	f8 cf       	rjmp	.-16     	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
 710:	8a 94       	dec	r8
 712:	f3 01       	movw	r30, r6
 714:	e8 0d       	add	r30, r8
 716:	f1 1d       	adc	r31, r1
 718:	80 81       	ld	r24, Z
 71a:	b6 01       	movw	r22, r12
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	40 d0       	rcall	.+128    	; 0x7a0 <fputc>
 720:	81 10       	cpse	r8, r1
 722:	f6 cf       	rjmp	.-20     	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
 724:	22 20       	and	r2, r2
 726:	09 f4       	brne	.+2      	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
 728:	4e ce       	rjmp	.-868    	; 0x3c6 <vfprintf+0x4c>
 72a:	b6 01       	movw	r22, r12
 72c:	80 e2       	ldi	r24, 0x20	; 32
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	37 d0       	rcall	.+110    	; 0x7a0 <fputc>
 732:	2a 94       	dec	r2
 734:	f7 cf       	rjmp	.-18     	; 0x724 <__LOCK_REGION_LENGTH__+0x324>
 736:	f6 01       	movw	r30, r12
 738:	86 81       	ldd	r24, Z+6	; 0x06
 73a:	97 81       	ldd	r25, Z+7	; 0x07
 73c:	02 c0       	rjmp	.+4      	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
 73e:	8f ef       	ldi	r24, 0xFF	; 255
 740:	9f ef       	ldi	r25, 0xFF	; 255
 742:	2b 96       	adiw	r28, 0x0b	; 11
 744:	0f b6       	in	r0, 0x3f	; 63
 746:	f8 94       	cli
 748:	de bf       	out	0x3e, r29	; 62
 74a:	0f be       	out	0x3f, r0	; 63
 74c:	cd bf       	out	0x3d, r28	; 61
 74e:	df 91       	pop	r29
 750:	cf 91       	pop	r28
 752:	1f 91       	pop	r17
 754:	0f 91       	pop	r16
 756:	ff 90       	pop	r15
 758:	ef 90       	pop	r14
 75a:	df 90       	pop	r13
 75c:	cf 90       	pop	r12
 75e:	bf 90       	pop	r11
 760:	af 90       	pop	r10
 762:	9f 90       	pop	r9
 764:	8f 90       	pop	r8
 766:	7f 90       	pop	r7
 768:	6f 90       	pop	r6
 76a:	5f 90       	pop	r5
 76c:	4f 90       	pop	r4
 76e:	3f 90       	pop	r3
 770:	2f 90       	pop	r2
 772:	08 95       	ret

00000774 <strnlen_P>:
 774:	fc 01       	movw	r30, r24
 776:	05 90       	lpm	r0, Z+
 778:	61 50       	subi	r22, 0x01	; 1
 77a:	70 40       	sbci	r23, 0x00	; 0
 77c:	01 10       	cpse	r0, r1
 77e:	d8 f7       	brcc	.-10     	; 0x776 <strnlen_P+0x2>
 780:	80 95       	com	r24
 782:	90 95       	com	r25
 784:	8e 0f       	add	r24, r30
 786:	9f 1f       	adc	r25, r31
 788:	08 95       	ret

0000078a <strnlen>:
 78a:	fc 01       	movw	r30, r24
 78c:	61 50       	subi	r22, 0x01	; 1
 78e:	70 40       	sbci	r23, 0x00	; 0
 790:	01 90       	ld	r0, Z+
 792:	01 10       	cpse	r0, r1
 794:	d8 f7       	brcc	.-10     	; 0x78c <strnlen+0x2>
 796:	80 95       	com	r24
 798:	90 95       	com	r25
 79a:	8e 0f       	add	r24, r30
 79c:	9f 1f       	adc	r25, r31
 79e:	08 95       	ret

000007a0 <fputc>:
 7a0:	0f 93       	push	r16
 7a2:	1f 93       	push	r17
 7a4:	cf 93       	push	r28
 7a6:	df 93       	push	r29
 7a8:	fb 01       	movw	r30, r22
 7aa:	23 81       	ldd	r18, Z+3	; 0x03
 7ac:	21 fd       	sbrc	r18, 1
 7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <fputc+0x16>
 7b0:	8f ef       	ldi	r24, 0xFF	; 255
 7b2:	9f ef       	ldi	r25, 0xFF	; 255
 7b4:	2c c0       	rjmp	.+88     	; 0x80e <fputc+0x6e>
 7b6:	22 ff       	sbrs	r18, 2
 7b8:	16 c0       	rjmp	.+44     	; 0x7e6 <fputc+0x46>
 7ba:	46 81       	ldd	r20, Z+6	; 0x06
 7bc:	57 81       	ldd	r21, Z+7	; 0x07
 7be:	24 81       	ldd	r18, Z+4	; 0x04
 7c0:	35 81       	ldd	r19, Z+5	; 0x05
 7c2:	42 17       	cp	r20, r18
 7c4:	53 07       	cpc	r21, r19
 7c6:	44 f4       	brge	.+16     	; 0x7d8 <fputc+0x38>
 7c8:	a0 81       	ld	r26, Z
 7ca:	b1 81       	ldd	r27, Z+1	; 0x01
 7cc:	9d 01       	movw	r18, r26
 7ce:	2f 5f       	subi	r18, 0xFF	; 255
 7d0:	3f 4f       	sbci	r19, 0xFF	; 255
 7d2:	31 83       	std	Z+1, r19	; 0x01
 7d4:	20 83       	st	Z, r18
 7d6:	8c 93       	st	X, r24
 7d8:	26 81       	ldd	r18, Z+6	; 0x06
 7da:	37 81       	ldd	r19, Z+7	; 0x07
 7dc:	2f 5f       	subi	r18, 0xFF	; 255
 7de:	3f 4f       	sbci	r19, 0xFF	; 255
 7e0:	37 83       	std	Z+7, r19	; 0x07
 7e2:	26 83       	std	Z+6, r18	; 0x06
 7e4:	14 c0       	rjmp	.+40     	; 0x80e <fputc+0x6e>
 7e6:	8b 01       	movw	r16, r22
 7e8:	ec 01       	movw	r28, r24
 7ea:	fb 01       	movw	r30, r22
 7ec:	00 84       	ldd	r0, Z+8	; 0x08
 7ee:	f1 85       	ldd	r31, Z+9	; 0x09
 7f0:	e0 2d       	mov	r30, r0
 7f2:	09 95       	icall
 7f4:	89 2b       	or	r24, r25
 7f6:	e1 f6       	brne	.-72     	; 0x7b0 <fputc+0x10>
 7f8:	d8 01       	movw	r26, r16
 7fa:	16 96       	adiw	r26, 0x06	; 6
 7fc:	8d 91       	ld	r24, X+
 7fe:	9c 91       	ld	r25, X
 800:	17 97       	sbiw	r26, 0x07	; 7
 802:	01 96       	adiw	r24, 0x01	; 1
 804:	17 96       	adiw	r26, 0x07	; 7
 806:	9c 93       	st	X, r25
 808:	8e 93       	st	-X, r24
 80a:	16 97       	sbiw	r26, 0x06	; 6
 80c:	ce 01       	movw	r24, r28
 80e:	df 91       	pop	r29
 810:	cf 91       	pop	r28
 812:	1f 91       	pop	r17
 814:	0f 91       	pop	r16
 816:	08 95       	ret

00000818 <__ultoa_invert>:
 818:	fa 01       	movw	r30, r20
 81a:	aa 27       	eor	r26, r26
 81c:	28 30       	cpi	r18, 0x08	; 8
 81e:	51 f1       	breq	.+84     	; 0x874 <__ultoa_invert+0x5c>
 820:	20 31       	cpi	r18, 0x10	; 16
 822:	81 f1       	breq	.+96     	; 0x884 <__ultoa_invert+0x6c>
 824:	e8 94       	clt
 826:	6f 93       	push	r22
 828:	6e 7f       	andi	r22, 0xFE	; 254
 82a:	6e 5f       	subi	r22, 0xFE	; 254
 82c:	7f 4f       	sbci	r23, 0xFF	; 255
 82e:	8f 4f       	sbci	r24, 0xFF	; 255
 830:	9f 4f       	sbci	r25, 0xFF	; 255
 832:	af 4f       	sbci	r26, 0xFF	; 255
 834:	b1 e0       	ldi	r27, 0x01	; 1
 836:	3e d0       	rcall	.+124    	; 0x8b4 <__ultoa_invert+0x9c>
 838:	b4 e0       	ldi	r27, 0x04	; 4
 83a:	3c d0       	rcall	.+120    	; 0x8b4 <__ultoa_invert+0x9c>
 83c:	67 0f       	add	r22, r23
 83e:	78 1f       	adc	r23, r24
 840:	89 1f       	adc	r24, r25
 842:	9a 1f       	adc	r25, r26
 844:	a1 1d       	adc	r26, r1
 846:	68 0f       	add	r22, r24
 848:	79 1f       	adc	r23, r25
 84a:	8a 1f       	adc	r24, r26
 84c:	91 1d       	adc	r25, r1
 84e:	a1 1d       	adc	r26, r1
 850:	6a 0f       	add	r22, r26
 852:	71 1d       	adc	r23, r1
 854:	81 1d       	adc	r24, r1
 856:	91 1d       	adc	r25, r1
 858:	a1 1d       	adc	r26, r1
 85a:	20 d0       	rcall	.+64     	; 0x89c <__ultoa_invert+0x84>
 85c:	09 f4       	brne	.+2      	; 0x860 <__ultoa_invert+0x48>
 85e:	68 94       	set
 860:	3f 91       	pop	r19
 862:	2a e0       	ldi	r18, 0x0A	; 10
 864:	26 9f       	mul	r18, r22
 866:	11 24       	eor	r1, r1
 868:	30 19       	sub	r19, r0
 86a:	30 5d       	subi	r19, 0xD0	; 208
 86c:	31 93       	st	Z+, r19
 86e:	de f6       	brtc	.-74     	; 0x826 <__ultoa_invert+0xe>
 870:	cf 01       	movw	r24, r30
 872:	08 95       	ret
 874:	46 2f       	mov	r20, r22
 876:	47 70       	andi	r20, 0x07	; 7
 878:	40 5d       	subi	r20, 0xD0	; 208
 87a:	41 93       	st	Z+, r20
 87c:	b3 e0       	ldi	r27, 0x03	; 3
 87e:	0f d0       	rcall	.+30     	; 0x89e <__ultoa_invert+0x86>
 880:	c9 f7       	brne	.-14     	; 0x874 <__ultoa_invert+0x5c>
 882:	f6 cf       	rjmp	.-20     	; 0x870 <__ultoa_invert+0x58>
 884:	46 2f       	mov	r20, r22
 886:	4f 70       	andi	r20, 0x0F	; 15
 888:	40 5d       	subi	r20, 0xD0	; 208
 88a:	4a 33       	cpi	r20, 0x3A	; 58
 88c:	18 f0       	brcs	.+6      	; 0x894 <__ultoa_invert+0x7c>
 88e:	49 5d       	subi	r20, 0xD9	; 217
 890:	31 fd       	sbrc	r19, 1
 892:	40 52       	subi	r20, 0x20	; 32
 894:	41 93       	st	Z+, r20
 896:	02 d0       	rcall	.+4      	; 0x89c <__ultoa_invert+0x84>
 898:	a9 f7       	brne	.-22     	; 0x884 <__ultoa_invert+0x6c>
 89a:	ea cf       	rjmp	.-44     	; 0x870 <__ultoa_invert+0x58>
 89c:	b4 e0       	ldi	r27, 0x04	; 4
 89e:	a6 95       	lsr	r26
 8a0:	97 95       	ror	r25
 8a2:	87 95       	ror	r24
 8a4:	77 95       	ror	r23
 8a6:	67 95       	ror	r22
 8a8:	ba 95       	dec	r27
 8aa:	c9 f7       	brne	.-14     	; 0x89e <__ultoa_invert+0x86>
 8ac:	00 97       	sbiw	r24, 0x00	; 0
 8ae:	61 05       	cpc	r22, r1
 8b0:	71 05       	cpc	r23, r1
 8b2:	08 95       	ret
 8b4:	9b 01       	movw	r18, r22
 8b6:	ac 01       	movw	r20, r24
 8b8:	0a 2e       	mov	r0, r26
 8ba:	06 94       	lsr	r0
 8bc:	57 95       	ror	r21
 8be:	47 95       	ror	r20
 8c0:	37 95       	ror	r19
 8c2:	27 95       	ror	r18
 8c4:	ba 95       	dec	r27
 8c6:	c9 f7       	brne	.-14     	; 0x8ba <__ultoa_invert+0xa2>
 8c8:	62 0f       	add	r22, r18
 8ca:	73 1f       	adc	r23, r19
 8cc:	84 1f       	adc	r24, r20
 8ce:	95 1f       	adc	r25, r21
 8d0:	a0 1d       	adc	r26, r0
 8d2:	08 95       	ret

000008d4 <_exit>:
 8d4:	f8 94       	cli

000008d6 <__stop_program>:
 8d6:	ff cf       	rjmp	.-2      	; 0x8d6 <__stop_program>
